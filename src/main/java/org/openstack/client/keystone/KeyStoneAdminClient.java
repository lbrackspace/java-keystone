package org.openstack.client.keystone;

import com.sun.jersey.api.client.Client;
import com.sun.jersey.api.client.ClientResponse;
import com.sun.jersey.api.client.UniformInterfaceException;
import com.sun.jersey.api.client.filter.HTTPBasicAuthFilter;
import com.sun.jersey.core.util.MultivaluedMapImpl;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.openstack.client.keystone.Wrapper.KeyStonePropertyWrapper;
import org.openstack.client.keystone.Wrapper.KeyStoneResponseWrapper;
import org.openstack.client.keystone.token.FullToken;
import org.openstack.client.keystone.user.User;

import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.MultivaluedMap;
import java.net.URI;
import java.net.URISyntaxException;

/**
 *
 */
public class KeyStoneAdminClient {
    private final Log logger = LogFactory.getLog(KeyStoneAdminClient.class);

    private String basicAuthUserName;
    private String basicAuthKey;
    private String authUrl;
    private Client client;

    /**
     * @param authUrl           the url to the KeyStone auth service
     * @param basicAuthKey      the key for basic authentication
     * @param basicAuthUserName the username for basic authentication
     * @param client            the client used to talk to KeyStone
     */
    public KeyStoneAdminClient(String authUrl, String basicAuthKey, String basicAuthUserName, Client client) throws KeyStoneException {
        this.authUrl = authUrl;
        if (authUrl == null) {
            this.authUrl = KeyStoneUtil.getProperty("auth_management_uri");
        }
        this.basicAuthKey = basicAuthKey;
        this.basicAuthUserName = basicAuthUserName;
        this.client = client;
        if (client != null) {
            this.client.addFilter(new HTTPBasicAuthFilter(basicAuthUserName, basicAuthKey));
        }
    }

    /**
     * This method will create the clients web resource based on the authUrl
     *
     * @param authUrl           the url to the KeyStone auth service
     * @param basicAuthKey      the key for basic authentication
     * @param basicAuthUserName the username for basic authentication
     * @throws URISyntaxException
     */
    public KeyStoneAdminClient(String authUrl, String basicAuthKey, String basicAuthUserName) throws KeyStoneException {
        this(authUrl, basicAuthKey, basicAuthUserName, Client.create());
    }

    /**
     * This method will create the clients web resource based on the authUrl
     *
     * @param authUrl the url to the KeyStone auth service
     * @throws URISyntaxException
     */
    public KeyStoneAdminClient(String authUrl) throws KeyStoneException {
        this(authUrl, KeyStoneUtil.getProperty("basic_auth_key"), KeyStoneUtil.getProperty("basic_auth_user"));
    }

    /**
     * This method uses the default authUrl, basicUsername, basicKey
     * from KeyStoneUtil and the properties file.
     */
    public KeyStoneAdminClient() throws KeyStoneException {
        this(KeyStoneUtil.getProperty("auth_management_uri"),
                KeyStoneUtil.getProperty("basic_auth_key"),
                KeyStoneUtil.getProperty("basic_auth_user"));
    }

    /**
     * This method validates a user and token based on the credentials.
     * ex. requestType="token" belongsToType="mosso" username={accountId} will validate token
     * and authenticate against the KeyStone auth service using mosso style credentials. i.e(accountId and token)
     *
     * @param username      the username
     * @param token         the token attached to the user
     * @param belongsToType the type describing which service the user correlates to i.e.(MOSSO|NAST|CLOUD)
     * @return FullToken the token object associated with the validated account when the account is valid
     * @throws KeyStoneException  the exception generated by the KeyStone auth service
     * @throws URISyntaxException there was an error building the URI
     */
    public FullToken validateToken(String username, String token, String belongsToType) throws KeyStoneException, URISyntaxException {
        MultivaluedMap<String, String> queryParams = new MultivaluedMapImpl();
        queryParams.add("belongsTo", username);
        queryParams.add("type", KeyStonePropertyWrapper.mapType(belongsToType));

        try {
            URI uri = new URI(authUrl + KeyStoneConstants.TOKEN_PATH);
            logger.info("Attempting to contact auth service at: " + uri);
            ClientResponse response = client.resource(uri)
                    .path(token).queryParams(queryParams)
                    .accept(MediaType.APPLICATION_XML).get(ClientResponse.class);
            logger.info("Connected! processing response... response status is " + response.getStatus());
            if (response != null && response.getStatus() == KeyStoneConstants.ACCEPTED) {
                return response.getEntity(FullToken.class);
            } else {
                logger.info("The service returned a fault. status code: " + response.getStatus());
                throw KeyStoneResponseWrapper.buildFaultMessage(response);
            }
        } catch (UniformInterfaceException ux) {
            throw KeyStoneResponseWrapper.buildFaultMessage(ux.getResponse());
        } catch (IllegalArgumentException ex) {
            throw new KeyStoneException(ex.getMessage(), KeyStoneConstants.MISSING_PROP, KeyStoneConstants.AUTH_FAULT);
        }
    }

    /**
     * This method retrieves the users token based on the token id.
     *
     * @param tokenId
     * @return FullToken the token object associated with the account based on the token
     * @throws KeyStoneException  the exception generated by the KeyStone auth service
     * @throws URISyntaxException there was an error building the URI
     */
    public FullToken getToken(String tokenId) throws KeyStoneException, URISyntaxException {
        try {
            URI uri = new URI(authUrl + KeyStoneConstants.TOKEN_PATH);
            logger.info("Attempting to contact auth service at: " + uri);
            ClientResponse response = client.resource(uri)
                    .path(tokenId).accept(MediaType.APPLICATION_XML).get(ClientResponse.class);
            logger.info("Connected! processing response... response status is " + response.getStatus());
            if (response != null && response.getStatus() == KeyStoneConstants.ACCEPTED) {
                return response.getEntity(FullToken.class);
            } else {
                logger.info("The service returned a fault. status code: " + response.getStatus());
                throw KeyStoneResponseWrapper.buildFaultMessage(response);
            }
        } catch (UniformInterfaceException ux) {
            throw KeyStoneResponseWrapper.buildFaultMessage(ux.getResponse());
        } catch (IllegalArgumentException ex) {
            throw new KeyStoneException(ex.getMessage(), KeyStoneConstants.MISSING_PROP, KeyStoneConstants.AUTH_FAULT);
        }
    }

    /**
     * This method revokes the users token based on the token id.
     *
     * @param tokenId
     * @throws KeyStoneException  the exception generated by the KeyStone auth service
     * @throws URISyntaxException there was an error building the URI
     */
    public void revokeToken(String tokenId) throws KeyStoneException, URISyntaxException {
        try {
            URI uri = new URI(authUrl + KeyStoneConstants.TOKEN_PATH);
            logger.info("Attempting to contact auth service at: " + uri);
            ClientResponse response = client.resource(uri)
                    .path(tokenId).accept(MediaType.APPLICATION_XML).delete(ClientResponse.class);
            logger.info("Connected! processing response... response status is " + response.getStatus());
            if (response != null && response.getStatus() == KeyStoneConstants.ACCEPTED) {
                return;
            } else {
                logger.info("The service returned a fault. status code: " + response.getStatus());
                throw KeyStoneResponseWrapper.buildFaultMessage(response);
            }
        } catch (UniformInterfaceException ux) {
            throw KeyStoneResponseWrapper.buildFaultMessage(ux.getResponse());
        } catch (IllegalArgumentException ex) {
            throw new KeyStoneException(ex.getMessage(), KeyStoneConstants.MISSING_PROP, KeyStoneConstants.AUTH_FAULT);
        }
    }

    /**
     * This method retrieves the user object based on the provided username, In order to query
     * against alternate id's the requestType must be set to an accepted value.
     * ex.(username=nastUser requestType=nast) or ex.(username=cloudUser requestType=users ) or ex.(username=mossoAccountId requestType=mosso )
     *
     * @param username    the username to query against KeyStone auth service
     * @param requestType the requestType to determine the type of user to retrieve ex(MOSSO|CLOUD|NAST)
     * @return User the user object associated with the username
     * @throws KeyStoneException  the exception generated by the KeyStone auth service
     * @throws URISyntaxException there was an error building the URI
     */
    public User listUser(String username, String requestType) throws KeyStoneException, URISyntaxException {
        try {
            URI uri = new URI(authUrl + requestType);
            logger.info("Attempting to contact auth service at: " + uri);
            ClientResponse response = client.resource(uri).path(username).accept(MediaType.APPLICATION_XML).get(ClientResponse.class);
            logger.info("Connected! processing response... response status is " + response.getStatus());
            if (response != null && response.getStatus() == KeyStoneConstants.ACCEPTED) {
                return response.getEntity(User.class);
            } else {
                logger.info("The service returned a fault. status code: " + response.getStatus());
                throw KeyStoneResponseWrapper.buildFaultMessage(response);
            }
        } catch (UniformInterfaceException ux) {
            throw KeyStoneResponseWrapper.buildFaultMessage(ux.getResponse());
        } catch (IllegalArgumentException ex) {
            throw new KeyStoneException(ex.getMessage(), KeyStoneConstants.MISSING_PROP, KeyStoneConstants.AUTH_FAULT);
        }
    }

    /**
     * This method will retrieve the user based on the username and default to the users path
     *
     * @param username the username to retrieve
     * @return the user
     * @throws KeyStoneException  the exception generated by the KeyStone auth service
     * @throws URISyntaxException there was an error building the URI
     */
    public User listUser(String username) throws KeyStoneException, URISyntaxException {
        return listUser(username, KeyStoneConstants.USER_PATH);
    }

    /**
     * This method retrieves the user object based on the provided username, In order to query
     * for the user key
     *
     * @param username the username to query against KeyStone auth service
     * @return User the user object associated with the username
     * @throws KeyStoneException  the exception generated by the KeyStone auth service
     * @throws URISyntaxException there was an error building the URI
     */
    public User getUserKey(String username) throws KeyStoneException, URISyntaxException {
        try {
            URI uri = new URI(authUrl + KeyStoneConstants.USER_PATH);
            logger.info("Attempting to contact auth service at: " + uri);
            ClientResponse response = client.resource(uri)
                    .path(username).path(KeyStoneConstants.KEY_PATH).accept(MediaType.APPLICATION_XML).get(ClientResponse.class);
            logger.info("Connected! processing response... response status is " + response.getStatus());
            if (response != null && response.getStatus() == KeyStoneConstants.ACCEPTED) {
                return response.getEntity(User.class);
            } else {
                logger.info("The service returned a fault. status code: " + response.getStatus());
                throw KeyStoneResponseWrapper.buildFaultMessage(response);
            }
        } catch (UniformInterfaceException ux) {
            throw KeyStoneResponseWrapper.buildFaultMessage(ux.getResponse());
        } catch (IllegalArgumentException ex) {
            throw new KeyStoneException(ex.getMessage(), KeyStoneConstants.MISSING_PROP, KeyStoneConstants.AUTH_FAULT);
        }
    }

    /**
     * This method will create the user based on the required params...
     *
     * @param username the username for the new user
     * @param key      the key for the new user
     * @param mossoId  the mossoId for the new user
     * @param nastId   the nastId for the new user
     * @param enabled  is the user enabled
     * @return * @throws KeyStoneException  the exception generated by the KeyStone auth service
     * @throws URISyntaxException there was an error building the URI
     */
    public User createUser(String username, String key, Integer mossoId, String nastId, boolean enabled) throws KeyStoneException, URISyntaxException {
        try {
            URI uri = new URI(authUrl + KeyStoneConstants.USER_PATH);
            logger.debug("Attempting to contact auth service at: " + uri);
            org.openstack.client.keystone.pojo.User user = new org.openstack.client.keystone.pojo.User();
            user.setId(username);
            user.setKey(key);
            user.setMossoId(mossoId);
            user.setNastId(nastId);
            user.setEnabled(enabled);

            ClientResponse response = client.resource(uri).accept(MediaType.APPLICATION_XML).post(ClientResponse.class, user);
            logger.info("Connected! processing response... response status is " + response.getStatus());
            if (response != null && response.getStatus() == KeyStoneConstants.CREATED) {
                return response.getEntity(User.class);
            } else {
                logger.info("The service returned a fault. status code: " + response.getStatus());
                throw KeyStoneResponseWrapper.buildFaultMessage(response);
            }
        } catch (UniformInterfaceException ux) {
            throw KeyStoneResponseWrapper.buildFaultMessage(ux.getResponse());
        } catch (IllegalArgumentException ex) {
            throw new KeyStoneException(ex.getMessage(), KeyStoneConstants.MISSING_PROP, KeyStoneConstants.AUTH_FAULT);
        }
    }

    /**
     * This method will delete the specified user
     *
     * @param username the username of the user to delete
     * @throws KeyStoneException  the exception generated by the KeyStone auth service
     * @throws URISyntaxException there was an error building the URI
     */
    public void deleteUser(String username) throws KeyStoneException, URISyntaxException {
        try {
            URI uri = new URI(authUrl + KeyStoneConstants.USER_PATH);
            logger.info("Attempting to contact auth service at: " + uri);
            ClientResponse response = client.resource(uri).path(username)
                    .type(MediaType.APPLICATION_XML).accept(MediaType.APPLICATION_XML).delete(ClientResponse.class);
            logger.info("Connected! processing response... response status is " + response.getStatus());
            if (response != null && response.getStatus() != KeyStoneConstants.NO_CONTENT) {
                logger.info("The service returned a fault. status code: " + response.getStatus());
                throw KeyStoneResponseWrapper.buildFaultMessage(response);
            } else {
                return;
            }
        } catch (UniformInterfaceException ux) {
            throw KeyStoneResponseWrapper.buildFaultMessage(ux.getResponse());
        } catch (IllegalArgumentException ex) {
            throw new KeyStoneException(ex.getMessage(), KeyStoneConstants.MISSING_PROP, KeyStoneConstants.AUTH_FAULT);
        }
    }

    /**
     * This method will set the key for the specified user
     *
     * @param key      the key to set
     * @param username the username
     * @return
     * @throws KeyStoneException  the exception generated by the KeyStone auth service
     * @throws URISyntaxException there was an error building the URI
     */
    public User setUserKey(String key, String username) throws KeyStoneException, URISyntaxException {
        try {
            URI uri = new URI(authUrl + KeyStoneConstants.USER_PATH);
            logger.info("Attempting to contact auth service at: " + uri);
            org.openstack.client.keystone.pojo.User user = new org.openstack.client.keystone.pojo.User();
            user.setKey(key);

            ClientResponse response = client.resource(uri)
                    .path(username).path(KeyStoneConstants.KEY_PATH)
                    .type(MediaType.APPLICATION_XML).accept(MediaType.APPLICATION_XML).put(ClientResponse.class, user);
            logger.info("Connected! processing response... response status is " + response.getStatus());
            if (response != null && response.getStatus() == KeyStoneConstants.ACCEPTED || response.getStatus() == KeyStoneConstants.NON_AUTHORATIVE) {
                return response.getEntity(User.class);
            } else {
                logger.info("The service returned a fault. status code: " + response.getStatus());
                throw KeyStoneResponseWrapper.buildFaultMessage(response);
            }
        } catch (UniformInterfaceException ux) {
            throw KeyStoneResponseWrapper.buildFaultMessage(ux.getResponse());
        } catch (IllegalArgumentException ex) {
            throw new KeyStoneException(ex.getMessage(), KeyStoneConstants.MISSING_PROP, KeyStoneConstants.AUTH_FAULT);
        }
    }
}